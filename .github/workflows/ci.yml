name: "Electron Builder App CI Pipeline"

### Things we can improve 
# Cache the npm run builds everywhere so we don't have to waste time 

on:
  workflow_dispatch:

jobs:
  vuln_scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit for a basic vuln scan
        run: npm audit || true

  build:
    runs-on: ubuntu-latest
    needs: [vuln_scan]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: npm ci

      - name: Build Electron app
        run: npm run build

      - name: Package Electron app as .tar.gz
        run: npx electron-builder --linux tar.gz

      - name: Upload packaged artifact
        uses: actions/upload-artifact@v4
        with:
          name: electron-secure-defaults-tar
          path: dist/*.tar.gz

      - name: Mock Notification
        if: always()
        run: |
          echo "Build Notification:"
          echo "CI Build URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          echo "Build Status: ${{ job.status }}"
          echo "Artifact: electron-secure-defaults-tar"

  release-new-dmg:
    runs-on: macos-latest
    needs: [build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: npm ci

      - name: Build Electron app
        run: npm run build

      - name: Build macOS .dmg
        run: npx electron-builder --mac dmg
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Upload macOS .dmg artifact
        uses: actions/upload-artifact@v4
        with:
          name: electron-secure-defaults-dmg
          path: dist/*.dmg

  release:
    runs-on: ubuntu-latest
    needs: [build, release-new-dmg]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Linux artifact
        uses: actions/download-artifact@v4
        with:
          name: electron-secure-defaults-tar
          path: ./dist

      - name: Download macOS artifact
        uses: actions/download-artifact@v4
        with:
          name: electron-secure-defaults-dmg
          path: ./dist

      - name: Create GitHub Release and Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          name: Release ${{ github.ref_name }}
          tag_name: ${{ github.ref_name }}
          draft: false
          prerelease: false
          files: |
            ./dist/*.tar.gz
            ./dist/*.dmg
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}